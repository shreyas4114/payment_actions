name: SonarCloud Code Quality Check

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER: payment-eks

jobs:
  sonarcloud-scan:
    runs-on: ubuntu-latest
    name: SonarCloud Analysis

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Setup Node.js (for both frontend and backend)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install & test backend (Node.js)
      - name: Install Backend Dependencies
        working-directory: ./src/backend
        run: npm install

      - name: Run Backend Tests (optional)
        working-directory: ./src/backend
        run: npm test || true

      # Install & test frontend (React)
      - name: Install Frontend Dependencies
        working-directory: ./src/frontend
        run: npm install

      - name: Run Frontend Tests (optional)
        working-directory: ./src/frontend
        run: npm test || true

      # Setup SonarScanner
      - name: Setup SonarScanner
        uses: warchant/setup-sonar-scanner@v7

      # Run SonarCloud scan for both frontend & backend
      - name: SonarCloud Scan
        run: |
          sonar-scanner \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/backend,src/frontend \
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/** \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Optional: Check Quality Gate status
      # - name: SonarCloud Quality Gate Check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
  
  BUILD_AND_PUBLISH:
    name: Build & Push Docker Images
    needs: sonarcloud-scan
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      # Backend Image
      - name: Build & Push Backend Image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: payment-backend
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./src/backend/Dockerfile
          context: ./src/backend
  
      # Frontend Image
      - name: Build & Push Frontend Image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: payment-frontend
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./src/frontend/Dockerfile
          context: ./src/frontend

  DeployToEKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Print config file
        run: cat ~/.kube/config

      - name: Login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS  --docker-password=$(aws ecr get-login-password) 

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          #config-files: .github/values/dev.yaml
          chart-path: helm/paymentcharts
          namespace: default
          name: payment-stack    
          values: |
            backend.image.repository=${{ secrets.REGISTRY }}/payment-backend,backend.image.tag=${{ github.run_number }},frontend.image.repository=${{ secrets.REGISTRY }}/payment-frontend,frontend.image.tag=${{ github.run_number }}
              
  
  
  
